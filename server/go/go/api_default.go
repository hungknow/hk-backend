/*
 * Trading API
 *
 * This API allow to interact with the trading system.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package hktrading_server

import (
	"net/http"
	"strings"
)

// DefaultAPIController binds http requests to an api service and writes the service results to the http response
type DefaultAPIController struct {
	service DefaultAPIServicer
	errorHandler ErrorHandler
}

// DefaultAPIOption for how the controller is set up.
type DefaultAPIOption func(*DefaultAPIController)

// WithDefaultAPIErrorHandler inject ErrorHandler into controller
func WithDefaultAPIErrorHandler(h ErrorHandler) DefaultAPIOption {
	return func(c *DefaultAPIController) {
		c.errorHandler = h
	}
}

// NewDefaultAPIController creates a default api controller
func NewDefaultAPIController(s DefaultAPIServicer, opts ...DefaultAPIOption) Router {
	controller := &DefaultAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DefaultAPIController
func (c *DefaultAPIController) Routes() Routes {
	return Routes{
		"GetCandles": Route{
			strings.ToUpper("Get"),
			"/candles",
			c.GetCandles,
		},
	}
}

// GetCandles - Get the list of candles
func (c *DefaultAPIController) GetCandles(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var symbolParam SymbolTicker
	if query.Has("symbol") {
		param := SymbolTicker(query.Get("symbol"))

		symbolParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "symbol"}, nil)
		return
	}
	var resolutionParam Resolution
	if query.Has("resolution") {
		param := Resolution(query.Get("resolution"))

		resolutionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "resolution"}, nil)
		return
	}
	var fromParam int32
	if query.Has("from") {
		param, err := parseNumericParameter[int32](
			query.Get("from"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		fromParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "from"}, nil)
		return
	}
	var toParam int32
	if query.Has("to") {
		param, err := parseNumericParameter[int32](
			query.Get("to"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		toParam = param
	} else {
	}
	result, err := c.service.GetCandles(r.Context(), symbolParam, resolutionParam, fromParam, toParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
