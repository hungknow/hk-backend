/*
 * Trading API
 *
 * This API allow to interact with the trading system. 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package hktrading_server


import (
	"fmt"
)



type Resolution string

// List of Resolution
const (
	M1 Resolution = "m1"
	M5 Resolution = "m5"
	M15 Resolution = "m15"
	M30 Resolution = "m30"
	H1 Resolution = "h1"
	H4 Resolution = "h4"
	D1 Resolution = "d1"
	W1 Resolution = "w1"
)

// AllowedResolutionEnumValues is all the allowed values of Resolution enum
var AllowedResolutionEnumValues = []Resolution{
	"m1",
	"m5",
	"m15",
	"m30",
	"h1",
	"h4",
	"d1",
	"w1",
}

// validResolutionEnumValue provides a map of Resolutions for fast verification of use input
var validResolutionEnumValues = map[Resolution]struct{}{
	"m1": {},
	"m5": {},
	"m15": {},
	"m30": {},
	"h1": {},
	"h4": {},
	"d1": {},
	"w1": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Resolution) IsValid() bool {
	_, ok := validResolutionEnumValues[v]
	return ok
}

// NewResolutionFromValue returns a pointer to a valid Resolution
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewResolutionFromValue(v string) (Resolution, error) {
	ev := Resolution(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for Resolution: valid values are %v", v, AllowedResolutionEnumValues)
	}
}



// AssertResolutionRequired checks if the required fields are not zero-ed
func AssertResolutionRequired(obj Resolution) error {
	return nil
}

// AssertResolutionConstraints checks if the values respects the defined constraints
func AssertResolutionConstraints(obj Resolution) error {
	return nil
}
